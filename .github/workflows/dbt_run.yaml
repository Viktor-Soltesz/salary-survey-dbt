name: DBT Run

on:
  push:
    paths:
      - '.github/workflows/dbt_run.yaml'
  workflow_dispatch:
  #schedule:
  #  - cron: '0 5 * * 1'  # Every Monday at 5:00 AM UTC

jobs:
  dbt-run:
    if: true  # Enable/disable manually
    runs-on: ubuntu-latest
    environment: prod

    env:
      GCP_PROJECT_ID: ${{ vars.PROJECT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache gcloud CLI config/plugins
        uses: actions/cache@v3
        with:
          path: ~/.config/gcloud
          key: ${{ runner.os }}-gcloud-${{ hashFiles('.github/workflows/dbt_run.yaml') }}
          restore-keys: |
            ${{ runner.os }}-gcloud-

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Write GCP credentials to file for DBT
        run: |
          echo "$GOOGLE_CREDENTIALS" > /tmp/gcp_keyfile.json
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install DBT and dependencies
        run: |
          pip install dbt-bigquery 'elementary-data[bigquery]'

      - name: Install DBT dependencies (packages)
        run: |
          dbt deps --profiles-dir ./profiles

      - name: Debug DBT connection
        run: |
          dbt debug --target prod-dbt-env --profiles-dir ./profiles

      - name: Check source freshness
        run: |
          dbt source freshness --target prod-dbt-env --profiles-dir ./profiles

      - name: Run DBT seeds
        run: |
          dbt seed --target prod-dbt-env --profiles-dir ./profiles

      - name: Run DBT models
        run: |
          dbt run --target prod-dbt-env --profiles-dir ./profiles

      - name: Run DBT snapshots
        run: |
          dbt snapshot --target prod-dbt-env --profiles-dir ./profiles

      - name: Run DBT tests
        run: |
          dbt test  --target prod-dbt-env --profiles-dir ./profiles

      # Elementary Data Reliability (EDR) steps
      - name: Run Elementary models
        # This step runs the Elementary dbt package models, which collect data for the report.
        run: |
          dbt run --profile elementary --target default --profiles-dir ./profiles --select elementary
        env:
          # Ensure the profiles directory is correctly set for Elementary's dbt commands
          DBT_PROFILES_DIR: ./profiles

      - name: Generate Elementary Data Reliability Report
        # This command generates the static HTML report files.
        run: |
          edr report --profile-target default --profiles-dir ./profiles
        env:
          # Ensure the profiles directory is correctly set for Elementary's edr commands
          DBT_PROFILES_DIR: ./profiles

      - name: Upload Elementary artifacts
        # Uploads the generated report files as a workflow artifact,
        # so they can be accessed by the deployment job.
        uses: actions/upload-artifact@v4
        with:
          name: elementary-report
          path: edr_target/ # Elementary's default output directory for reports
          retention-days: 1 # Keep artifacts for 1 day to save storage

  deploy-elementary-report:
    # This job will only run after the 'dbt-run' job has successfully completed.
    needs: dbt-run
    runs-on: ubuntu-latest
    environment: prod # Use the same environment as the dbt-run job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Use GITHUB_TOKEN to allow pushing to the gh-pages-elementary branch.
          token: ${{ secrets.GITHUB_TOKEN }}
          # Fetch all history for all branches to ensure gh-pages-elementary exists or can be created.
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Switch to gh-pages-elementary branch
        run: |
          git checkout gh-pages-elementary || git checkout -b gh-pages-elementary

      - name: Clean the branch
        run: |
          find . -maxdepth 1 -not -name '.git' -not -name '.' -exec rm -rf {} +

      - name: Download Elementary artifacts
        uses: actions/download-artifact@v4
        with:
          name: elementary-report
          path: .  # Download directly to the current directory

      - name: Commit and push changes
        run: |
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "Update Elementary Data Reliability Report"
            git push origin gh-pages-elementary
          else
            echo "No changes to the Elementary report. Skipping commit and push."
          fi

  notify-slack-success:
    needs: deploy-elementary-report
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack of successful upload
        uses: rtCamp/action-slack-notify@e31e87e03dd19038e411e38ae27cbad084a90661
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'GitHub Actions Bot'
          SLACK_COLOR: '#36a64f'  # green
          SLACK_MESSAGE: |
            ✅ *CSV Upload Workflow Succeeded*
            • Repo: `${{ github.repository }}`
            • Branch: `${{ github.ref_name }}`
            • Actor: `${{ github.actor }}`
            • Workflow: `${{ github.workflow }}`
            • Run: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs>

  notify-slack-failure:
    needs: deploy-elementary-report
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack of failed upload
        uses: rtCamp/action-slack-notify@e31e87e03dd19038e411e38ae27cbad084a90661
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'GitHub Actions Bot'
          SLACK_COLOR: '#FF0000'  # red
          SLACK_MESSAGE: |
            ❌ *CSV Upload Workflow Failed*
            • Repo: `${{ github.repository }}`
            • Branch: `${{ github.ref_name }}`
            • Actor: `${{ github.actor }}`
            • Workflow: `${{ github.workflow }}`
            • Run: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs>
